package models

import (
	"bytes"
	"fmt"
	"strings"
	"text/template"
)

// NatsConfigTemplate is the template for the NATS configuration file
const NatsConfigTemplate = `
# MQTT Authentication Configuration
# Auto-generated by nats-pocketbase-sync
# Generated at: {{ .Timestamp }}

authorization {
  # Default permissions applied to all users
  default_permissions = {
    publish = {{ .DefaultPublish }}
    subscribe = {{ .DefaultSubscribe }}
  }

  # Role definitions
  {{ range .Roles }}
  {{ .Name }} = {
    publish = {{ .PublishPermissions }}
    subscribe = {{ .SubscribePermissions }}
  }
  {{ end }}

  # User definitions
  users = [
    {{ range .Users }}
    {user: {{ .Username }}, password: "{{ .Password }}", permissions: ${{ .RoleName }}}{{ if not .IsLast }},{{ end }}
    {{ end }}
  ]
}
`

// NatsConfigData contains the data for the NATS configuration template
type NatsConfigData struct {
	Timestamp       string
	DefaultPublish  string
	DefaultSubscribe string
	Roles           []NatsRole
	Users           []NatsUser
}

// NatsRole represents a role in the NATS configuration
type NatsRole struct {
	Name                string
	PublishPermissions  string
	SubscribePermissions string
}

// NatsUser represents a user in the NATS configuration
type NatsUser struct {
	Username string
	Password string
	RoleName string
	IsLast   bool
}

// FormatConfigFile formats the NATS configuration file using the template and data
func FormatConfigFile(data *NatsConfigData) (string, error) {
	tmpl, err := template.New("nats_config").Parse(NatsConfigTemplate)
	if err != nil {
		return "", fmt.Errorf("failed to parse template: %w", err)
	}

	var output bytes.Buffer
	if err := tmpl.Execute(&output, data); err != nil {
		return "", fmt.Errorf("failed to execute template: %w", err)
	}

	// Clean up empty lines for better readability
	lines := strings.Split(output.String(), "\n")
	var cleanedLines []string
	for _, line := range lines {
		if strings.TrimSpace(line) != "" {
			cleanedLines = append(cleanedLines, line)
		}
	}

	return strings.Join(cleanedLines, "\n"), nil
}

// FormatDefaultPermissions formats the default permissions for NATS config
func FormatDefaultPermissions(publish, subscribe interface{}) (string, string) {
	// Format publish permission
	var publishStr string
	switch p := publish.(type) {
	case string:
		publishStr = `"` + p + `"`
	case []interface{}:
		var pubs []string
		for _, pub := range p {
			if pubStr, ok := pub.(string); ok {
				pubs = append(pubs, `"`+pubStr+`"`)
			}
		}
		if len(pubs) == 0 {
			publishStr = `""`
		} else if len(pubs) == 1 {
			publishStr = pubs[0]
		} else {
			publishStr = "[" + strings.Join(pubs, ", ") + "]"
		}
	default:
		publishStr = `""`
	}

	// Format subscribe permission
	var subscribeStr string
	switch s := subscribe.(type) {
	case string:
		subscribeStr = `"` + s + `"`
	case []interface{}:
		var subs []string
		for _, sub := range s {
			if subStr, ok := sub.(string); ok {
				subs = append(subs, `"`+subStr+`"`)
			}
		}
		if len(subs) == 0 {
			subscribeStr = `""`
		} else if len(subs) == 1 {
			subscribeStr = subs[0]
		} else {
			subscribeStr = "[" + strings.Join(subs, ", ") + "]"
		}
	default:
		subscribeStr = `""`
	}

	return publishStr, subscribeStr
}
